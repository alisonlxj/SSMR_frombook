<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans      
                        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd      
                        http://www.springframework.org/schema/context      
                        http://www.springframework.org/schema/context/spring-context-4.3.xsd      
                        http://www.springframework.org/schema/mvc      
                        http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd">

<!-- spring的整体配置文件，主要放置 数据源配置、bean包扫描、事务控制等 -->


<!-- ************数据库相关配置************** 1、数据源 2、sqlSessionFactory 3、MapperScannerConfigurer -->

	<!--引入jdbc配置 : 引入.properties配置文件 通过PropertyPlaceholderConfigurer这个类 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:config/jdbc.properties" />
	</bean>
	<!-- 数据源配置： 用 org.apache.commons.dbcp.BasicDataSource -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${maxWait}"></property>
	</bean>
	<!-- SqlSessionFactoryBean的配置，需要dataSource，mapperLocations， configLocation等，具体可进入SqlSessionFactoryBean，看其有哪些属性 -->
	<!-- 用mybatis目的就是为了获得sqlSessionFactory，这里通过spring的IOC的方式声明，，需要两个参数：dataSource和mapper文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 数据源配置 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml映射文件 -->
		<property name="mapperLocations" value="classpath:com/alison/mapper/*.xml"></property>   	<!-- 支持通配符的形式 ：注意是路径/的形式，不是包.的形式 -->
		<!-- 配置mybatis自己单独的配置文件，可有可无 -->
		<property name="configLocation" value="classpath:mybatis_config.xml" />
	</bean>
	<!-- 创建数据映射器:就是对应的接口文件 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.alison.mapper" />
	</bean>

<!-- ************ 数据库相关配置__end ************** -->


<!-- ************事务配置************** -->
	<!-- 对数据源进行事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

<!-- ************ 事务配置__end ************** -->




<!-- ************ bean包扫描 ************** -->
	<!-- 扫描文件(包下面的所有class都被识别为资源bean，需要的时候自动注入) -->
	<context:component-scan base-package="com.alison.utils" />


</beans>



